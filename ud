#!/bin/bash
#<ud>: It mounts external USB disks ONLY.   This to ensure no issues no issues with ZFS disc storage
# 4/15/2020 – v1.0 Creating script to quickly mount drives Initializing
# 4/16/2020 – v2.0 Automating everything... find drives, logic paths and mount as appropriate   
# 4/22/2020 - v2.1 Finalized and commited log capabilties and conf file for flexibility | add feature set
# 4/22/2020 - Removing logs.  Do not need to run as daemon.  

main ()
{
  #Main structure
      set -e  # exit if a command fails
      #exec > /dev/null 2>&1
  

  # Definition and Nomenclature
      # variables 
      SCFER=$1  #Captures argument e.g. a (Add), -r (Remove), c (Check)
      lecom="lsblk -o TRAN,TYPE,NAME,VENDOR,FSTYPE,LABEL,MOUNTPOINT,SIZE -n -P"
      zUSB="usb"
      
      # Nomenclature: (_pt = pointer) (_a=array)
      main_a=()     #Array: Output of lsblk columns.  Each line is stored as an element in the array 
      sub_a=()      #Array: Parsed commands (columns) from each lsblk line
      neud_pt_a=()  #Array: Pointers to UID disk and attributes.  Store main and sub arrays index if a new USB disk is detected.
    
  # Enumerate
      # Each word in the line is an element in the array '"'
      log debug "enumerating list of devices and mountpoints available in system"
      IFS='"' read -r -d '' -a main_a < <( $lecom && printf '\0' )
      # folders in path /media/*
      mntpoints
  
  # Argument Selection
      args

printf "\n%s" "" "... Completed succesfully" ""
echo " "
log info "($1) completed succesfully"

}


voy()
{
    for l in "${!main_a[@]}"; do
    #Set variables and check if device is an USB Disk Drive
    eUSB

        # Check if NAME is a partition of lNAME (e.g sdm1, sdm2 -> sdm)
        if [[ $NAME =~ $lNAME ]] && [[ ! -z $lNAME ]] && [[ $TYPE == "part" ]] && [[ ! $SIZE =~ "M" ]]; then

            printf "\n %s" "" " ---- USB $lVENDOR Drive" " Partition detected: $NAME"
            printf "\n %s" " Format: $FSTYPE" " Label: $LABEL" " #: $l" 
            [[ -z $MTYPE ]] && printf "\n%s" "  Parition is not mounted" || printf "\n%s" "  Mountpoint: $MTYPE "
            log debug "found usb $lVENDOR drive with valid $NAME paritition"

            # Create /media/$LABEL if it does not exist and *** mount disk ***
            if [[ $SCFER =~ "a" ]]; then sube; fi
            
        else
        # Size < 1GB Prompt message 
            if [[ $NAME =~ $lNAME ]] && [[ ! -z $lNAME ]] && [[ $TYPE == "part" ]] && [[ $SIZE =~ "M" ]]; then
                printf "\n %s" "" "  $NAME partition is under 1GB :: $SIZE"
                log err "cannot mount $NAME partition.  Size $SIZE is under 1GB"
            fi         
        fi
    done
}


args()
{
    case $SCFER in
      a | -a) 
          # Mount (Add) partitions
          voy
        ;;

      c | -c) 
          # Mount (Add) partitions
          printf "\n%s" "" " *** USB Disk Drives in System *** " 
          voy #A conditional will skip mount attempt
        ;;

      -r)
          # Run security checks -- Quick to avoid overwriting mounting points or attempting to mount to an internal HDD
          echo "Not active -- "
        ;;   

      *)
          #Instructions
          instructions
        ;;
    esac
}


eUSB()
{
    TRAN=${main_a[$l]}          #TRAN index (usb, sata, nvme)
    TYPE=${main_a[(($l+2))]}    #TYPE index (disk, part)
    NAME=${main_a[(($l+4))]}    #NAME index (/dev/name)
    VENDOR=${main_a[(($l+6))]}  #VENDOR index (ATA, WD)
    FSTYPE=${main_a[(($l+8))]}  #FSTYPE index (ntfs, zfs_member, ext4, etc.)
    LABEL=${main_a[(($l+10))]}  #LABEL index 
    MTYPE=${main_a[(($l+12))]}  #MOUNTTYPE index (/dev/<folder>)
    SIZE=${main_a[(($l+14))]}   #SIZE index (xxM, xxG, xxT)

    # Check if device is an USB Disk Drive 
    if [[ $TRAN == $zUSB ]] && [[ $TYPE == *"disk"* ]]; then
    #Assigns DISK name (e.g. sdm) & Device Manufacturer VENDOR
    lNAME=$NAME
    lVENDOR=${VENDOR%% *}
    log debug "found $zUSB devices and enumerated lsblk columns succesfuly"
    fi
}

sube()
{
  # Check if $LABEL is null; if so, then assign a name
      if [[ -z $LABEL ]]; then 
          printf "\n%s" "" "  $lVENDOR $NAME does not have a LABEL: Using USB$NAME "
          LABEL=USB$NAME
          log info "$lVENDOR: Partition $NAME does not have a label. Attempting to use USB$NAME"
      fi 
              
  # Check if partition is already mounted
      if [[ ! -z $MTYPE ]]; then 
          #Partition is mounted ... do nothing
          printf "\n %s " "" " $MTYPE is already mounted with /dev/$NAME :: Device [$lVENDOR] :: $FSTYPE" ""
          log info "mountpoint $MTYPE is mounted already with /dev/$NAME :: Device [$lVENDOR] :: $FSTYPE"
             
      else
          # Create folder /media/$LABEL if it does not exist
          if [[ ! ${monty_a[@]} =~ $LABEL ]]; then
          ( printf "\n%s" "" "  mkdir /media/$LABEL" "  ")
          mkdir /media/$LABEL
          log info "Creating /media/$LABEL mountpoint"          
          fi
    
      # Mount partition
          # Re-ensuring we are not touching ZFS drives
          if [[ $FSTYPE == "zfs_member" ]]; then echo "ZFS Member, not mounting"; log err "ZFS Member, not mounting"; else
          DEVNAME=/dev/$NAME 
        
          # Execute mount command
          printf "\n %s" "  mount -t $FSTYPE $DEVNAME /media/$LABEL"; echo 
          mount -t $FSTYPE $DEVNAME /media/$LABEL
          log info "executing command: mount -t $FSTYPE $DEVNAME /media/$LABEL"
          fi
      fi
}


mntpoints()
{
    shopt -s extglob nullglob
    basedir=/media
    # Add folders to array
    monty_a=( "$basedir"/*/ )
    # Remove leading basedir:
    monty_a=( "${monty_a[@]#"$basedir/"}" )
    # Remove trailing backslash
    monty_a=( "${monty_a[@]%/}" )
    log debug "enumerated mountpoints succesfuly"
}


instructions()
{
    echo " "
    echo "<ud> Command : ver 2.1 : Path=($0)"
    echo "Incorrect Syntax ($1) "
    echo " "
    echo " Usage: ud -[arg]"
    echo " "
    echo "Arguments [arg]:# "
    echo " -a   : Mounts USB disk drives with valid partitions"
    echo " -r   : unmount USB disk drives"
    echo " "
    echo "(Example:)"
    echo " ud -a: It mounts all unmounted USB disk drives"; echo
    log err "incorrect syntax ($1).  Exiting."
    exit 1
}


main "$@"; exit